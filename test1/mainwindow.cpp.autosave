#include "mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QDialog(parent)
{

    lbl1 = new QLabel("&Enter directory path");
    lbl2 = new QLabel("Directory info");

    dirPath = new QLineEdit;
    lbl1->setBuddy(dirPath);

    browse = new QPushButton("&Browse");
    ok = new QPushButton("&Ok");
    ok->setDefault(true);
    ok->setEnabled(false);
    quit = new QPushButton("&Quit");

    table = new QTableWidget;
    table->setColumnCount(3);
    QString *h = new QString;
    h->append("File extension, Avg size, General size");
    table->setHorizontalHeaderLabels(h->split(','));
    table->horizontalHeader()->setStretchLastSection(true);
    table->verticalHeader()->setVisible(false);

 //   table->setColumnWidth();
    //table->horizontalHeader();

    text = new QTextEdit;
    text->setReadOnly(true);

    QGridLayout *layout = new QGridLayout;
    layout->addWidget(lbl1, 1, 1);
    layout->addWidget(dirPath, 1, 2, 1, 2);
    layout->addWidget(browse, 1, 4);
    layout->addWidget(ok, 2, 4);
    layout->addWidget(quit, 9, 4);
    layout->addWidget(table,1,5, 6, 3);
    layout->addWidget(text, 8, 5, 2, 3);
    layout->addWidget(lbl2, 7,5);

    //layout->s
    //table->setColumnWidth();

    connect(dirPath,SIGNAL(textChanged(QString)), this, SLOT(TextChanged(QString)));
    connect(quit, SIGNAL(clicked()), this, SLOT(close()));
    connect(browse,SIGNAL(clicked()), this, SLOT(Open()));
    connect(ok,SIGNAL(clicked()),this, SLOT(OkClicked()));

    setLayout(layout);

}


void MainWindow::TextChanged(QString str)
{
    ok->setEnabled(!str.isEmpty());

}

void MainWindow::fileStat(const QDir& dir, QMap<QString,QPair<qint64, qint32> >& fileGroups)
{
    QFileInfoList list = dir.entryInfoList();
    foreach(QFileInfo file, list){
        if (file.isFile()){
            QString ext = file.fileName().split('.').takeLast(); //file extension
            if (fileGroups.contains(ext)){
                fileGroups[ext].first += file.size();
                fileGroups[ext].second++;
            }
            else{
                fileGroups.insert(ext, qMakePair(file.size(), 1));
            }
        }
        else if(file.isDir()){
            if (file.fileName()=="."||file.fileName()=="..")
                continue;
            fileStat(QDir(file.absoluteFilePath()), fileGroups);
        }
    }
}

void MainWindow::OkClicked()
{
    QDir *dir = new QDir(dirPath->text());
    text->clear();
    table->clearContents();

    if(! dir->exists()){
        QMessageBox::critical(this, tr("Error"), tr("Could not open directory"));
        return;
    }
    else{
        QMap<QString, QPair<qint64, qint32> > fileGroups;
        fileStat(QDir(dirPath->text()), fileGroups);
        table->setRowCount(fileGroups.keys().size()+1);
        int i = 0;
        qint64 allSize = 0;
        qint32 allCount= 0;
        foreach (QString ext, fileGroups.keys()) {
                QTableWidgetItem *itmExt = new QTableWidgetItem("."+ext);
                QTableWidgetItem *itmAvg = new QTableWidgetItem(QString::number(fileGroups[ext].first/fileGroups[ext].second/1024)+"Kb");
                QTableWidgetItem *itmGen = new QTableWidgetItem(QString::number(fileGroups[ext].first/1024)+"Kb");
                table->setItem(i,0, itmExt);
                table->setItem(i,1, itmAvg);
                table->setItem(i,2, itmGen);
                ++i;
                allSize += fileGroups[ext].first;
                allCount += fileGroups[ext].second;
        }
        QTableWidgetItem *itmExt = new QTableWidgetItem("All files");
        QTableWidgetItem *itmAvg = new QTableWidgetItem(QString::number(allSize/allCount/1024)+"Kb");
        QTableWidgetItem *itmGen = new QTableWidgetItem(QString::number(allSize/1024)+"Kb");
        itmExt->setBackgroundColor(Qt::green);
        itmAvg->setBackgroundColor(Qt::green);
        itmGen->setBackgroundColor(Qt::green);
        table->setItem(fileGroups.keys().size(),0, itmExt);
        table->setItem(fileGroups.keys().size(),1, itmAvg);
        table->setItem(fileGroups.keys().size(),2, itmGen);
        text->append("Path: "+dir->absolutePath());
        text->append("Subdirs count: "+QString::number(dir->entryList(QDir::AllDirs).count()-2)); //excluding "." and ".."

    }

}



void MainWindow::Open()
{
    QString dirName = QFileDialog::getExistingDirectory(this,
                                                        tr("Select Directory"),
                                                        "/home",
                                                        QFileDialog::ShowDirsOnly
                                                        | QFileDialog::DontResolveSymlinks);

    if (dirName != "") {
        dirPath->setText(dirName);
    }
}
